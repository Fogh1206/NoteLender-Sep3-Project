@page "/Invitations"
@using System.Drawing
@using Sep3Blazor.Data
@using Sep3Blazor.Data.InvitationData
@using Sep3Blazor.Model
@inject IInvitationService _invitationService
<h3>Pending invitations</h3>

<EditForm Model="@Invitation" OnValidSubmit="@SubmitGetInvitation">
@foreach (var invitation in InvitationList)
{
    <div class="card mb-2">
        <div class="card-header">
            @Invitation.id

        </div>
        <div class="card-body">
            <p>@Invitation.invitorId Wants you to pe apart of group @Invitation.groupId </p>

            <button type="button" style="background-color: darkgreen ">Accept</button>
            <button type="button" style="background-color: red" @onclick="@(() => RemoveInvitation(Invitation.id))">Decline</button>

        </div>
    </div>
}</EditForm>
<h3>Invite user to group</h3>
<div class="dropdown show">
    <a class="btn btn-secondary dropdown-toggle" href="#" role="button" id="dropdownMenuLink" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
        Dropdown link
    </a>

    <div class="dropdown-menu" aria-labelledby="dropdownMenuLink">
        <a class="dropdown-item" href="#">Action</a>
        <a class="dropdown-item" href="#">Another action</a>
        <a class="dropdown-item" href="#">Something else here</a>
    </div>
</div>

@code {
    /*
    public  class Invitation
    {
        public int id { get; set; }
        public int invitorId { get; set; }
        public int inviteeId { get; set; }
        public int groupId { get; set; }
    }
    */

    [Parameter]
    public String Value { get; set; }
    public string SearchPhrase;

    public IList<Invitation> InvitationList { get; set; }
    public Invitation Invitation = new Invitation(0,0,0,0);

    /*
    List<Invitation> Iinvitations = new List<Invitation>()
    {
        Iinvitations = await _invitationService.GetInvitations(Invitation.id.ToString());
        SearchPhrase = InvitationList[0].id.ToString();
    
    /*
        new Invitation(1, 2, 2, 3),
        new Invitation(2, 5, 3, 4)
       
};
*/

    private async Task RemoveInvitation(int id)
    {
        await _invitationService.DeleteInvitation(Invitation.id.ToString());
    }

    private async Task SubmitGetInvitation()
    {
        try
        {
            InvitationList = await _invitationService.GetInvitations(Invitation.id.ToString());
            SearchPhrase = InvitationList[0].id.ToString();
        }
        catch (ArgumentOutOfRangeException indexOutOfRangeException)
        {
            SearchPhrase = "Out of range";

        }
    }
    

}
