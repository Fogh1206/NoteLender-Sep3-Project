@page "/Notes"
@page "/Notes/{Id:int}" 
@using Sep3Blazor.Model
@using System.Globalization
@using Sep3Blazor.Data.NoteData
@namespace NotesComponent
@inject INoteService _noteService

<div class="row justify-content-between">
  <div class="col-sm-4">
    <h3>Week @(CurrentWeek-1)</h3>
    @if (NoteList == null)
    {
      Console.WriteLine("NoteList is empty/non-existing");
    }
    else
    {
      @foreach (Note note in NoteList)
      {
        if (note.week == (CurrentWeek-1))
        {
          <table class="table">
            <tr>
              <th>Name</th>
              <td>@note.name</td>
            </tr>
            <tr>
              <th>Year</th>
              <td>@note.year</td>
            </tr>
            <tr>
              <th>Status</th>
              <td>@note.status</td>
            </tr>
            <tr>
              <th>Text</th>
              <td>
                <textarea class=".bg-warning" disabled cols="32" rows="3">
                                    @note.text
                                  </textarea>
              </td>
            </tr>
          </table>
        }
      }
    }
  </div>
  <div class="col-sm-4">
    <h3>Week @CurrentWeek</h3>
    @if (NoteList == null)
    {
      Console.WriteLine("NoteList is empty/non-existing");
    }
    else
    {
      @foreach (Note note in NoteList)
      {
        if (note.week == CurrentWeek)
        {
          <table class="table">
            <tr>
              <th>Name</th>
              <td>@note.name</td>
            </tr>
            <tr>
              <th>Year</th>
              <td>@note.year</td>
            </tr>
            <tr>
              <th>Status</th>
              <td>@note.status</td>
            </tr>
            <tr>
              <th>Text</th>
              <td>
                <textarea class=".bg-warning" disabled cols="32" rows="3">
                                    @note.text
                                  </textarea>
              </td>
            </tr>
          </table>
        }
      }
    }
  </div>
  <div class="col-sm-4">
    <h3>Week @(CurrentWeek+1)</h3>
    @if (NoteList == null)
    {
      Console.WriteLine("NoteList is empty/non-existing");
    }
    else
    {
      @foreach (Note note in NoteList)
      {
        if (note.week == (CurrentWeek+1))
        {
          <table class="table">
            <tr>
              <th>Name</th>
              <td>@note.name</td>
            </tr>
            <tr>
              <th>Year</th>
              <td>@note.year</td>
            </tr>
            <tr>
              <th>Status</th>
              <td>@note.status</td>
            </tr>
            <tr>
              <th>Text</th>
              <td>
                <textarea class=".bg-warning" disabled cols="32" rows="3">
                    @note.text
                  </textarea>
              </td>
            </tr>
          </table>
        }
      }
    }
  </div>
</div>
<div class="col-12">
  <div class="d-flex justify-content-center">
    <button class="btn btn-primary btn-lg btn-block" @onclick="nextPage">Next</button>
  </div>
  <div class="d-flex justify-content-center">
    <button class="btn btn-secondary btn-lg btn-block" @onclick="previousPage">Previous</button>
  </div>
</div>



@code{

  [Parameter]
  public int Id { get; set; }
  [Parameter]
  public int Value { get; set; }
  public IList<Note> NoteList { get; set; }
  public int CurrentWeek;

  public void nextPage()
  {
    CurrentWeek++;
  }

  public void previousPage()
  {
    CurrentWeek--;
  }
  
  public static int GetIso8601WeekOfYear(DateTime time)
  {
    DayOfWeek day = CultureInfo.InvariantCulture.Calendar.GetDayOfWeek(time);
    if (day >= DayOfWeek.Monday && day <= DayOfWeek.Wednesday)
    {
      time = time.AddDays(3);
    }
    return CultureInfo.InvariantCulture.Calendar.GetWeekOfYear(time, CalendarWeekRule.FirstFourDayWeek, DayOfWeek.Monday);
  }
  
  protected override async Task OnInitializedAsync()
  {
    // Get the selected group's notes
    NoteList = await _noteService.GetNoteList(Value.ToString());
    
    // Get todays week
    CurrentWeek = GetIso8601WeekOfYear(DateTime.Today);
  }
  

}