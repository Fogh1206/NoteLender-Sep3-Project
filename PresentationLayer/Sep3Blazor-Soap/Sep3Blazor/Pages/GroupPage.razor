@page "/GroupPage"
@page "/GroupPage/{Id:int}" 

@using Sep3Blazor.Data.Refresh
@using Sep3Blazor.Model
@using LoginComponent
@using NotesComponent
@using Sep3Blazor.Data.GroupData
@using Sep3Blazor.Data.GroupMembersData
@using Sep3Blazor.Data.NoteData
@inject INoteService _noteService
@inject IGroupMembersService _groupMembersService
@inject IRefreshService _refreshService
@using Microsoft.AspNetCore.Components.Web.Extensions.Head

<Title Value="@("Group "+Id)" />
<h3>GroupPage</h3>

<TabControl>
    <TabPage Text="Notes">
        @if (Notes == null)
        {
            <p>
                <em>Loading...</em>
            </p>
        }
        else
        {
            <div class="col-sm-9" style="display:inline">
                <Notes Value=@Id></Notes>
            </div>
        }
    </TabPage>
    <TabPage Text="Members">
        @if (GroupMembersList == null)
        {
            <p>
                <em>Loading...</em>
            </p>
        }
        else
        {
            <div class="col-sm-3" style="display:inline">
                <h3>Members</h3>
                <table class="table" id="datatable">
                    <thead>
                    <tr>
                        <th>Username</th>
                    </tr>
                    </thead>
                    <tbody>
                    @foreach (var members in GroupMembersList)
                    {
                        <tr class="onHoverChange" @onclick="@(() => ChangeSelectedGroup(members))">
                            <td>@members.username</td>
                        </tr>
                    }
                    </tbody>
                </table>
            </div>
        }
    </TabPage>
    <TabPage Text="Invite">
        <h1>The third tab</h1>
    </TabPage>
</TabControl>

@code {

    [Parameter]
    public int Id { get; set; }


    [CascadingParameter]
    protected Task<AuthenticationState> AuthStat { get; set; }

    public string Value { get; set; }

    public IList<Note> Notes { get; set; }
    public IList<GroupMembers> GroupMembersList { get; set; }


    protected override async Task OnInitializedAsync()
    {
        Console.WriteLine("AdultPage");
        {
            _refreshService.RefreshRequested += RefreshState;
            Notes = await _noteService.GetNoteList(Id.ToString());
            GroupMembersList = await _groupMembersService.GetUserList(9);
            Console.WriteLine(Notes.Count);
            Console.WriteLine(GroupMembersList.Count);
        }
    }

    private void ChangeSelectedNote(Note note)
    {
        Value = note.id.ToString();
    }

    public async void RefreshState()
    {
        StateHasChanged();
        Console.WriteLine("Hey, i got called from componet");
        Notes = await _noteService.GetNoteList(Id.ToString());
    }


    private void ChangeSelectedGroup(GroupMembers groupMembers)
    {
        Value = groupMembers.id.ToString();
    }

}