@using Sep3Blazor.Data.GroupData
@using Sep3Blazor.Model
@using Sep3Blazor.Authentication
@using Sep3Blazor.Data.Refresh
@inject IGroupService _groupService
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject IRefreshServiceNavMem _refreshServiceNavMem

<div class="top-row pl-4 navbar navbar-dark">
    <a class="navbar-brand" href=""> NoteLender</a>
    <button class="navbar-toggler" @onclick="ToggleNavMenu">
        <span class="navbar-toggler-icon"></span>
    </button>
</div>

<div class="@NavMenuCssClass" @onclick="ToggleNavMenu">
    <ul class="nav flex-column">
        <li class="nav-item px-3">
            <AuthorizeView>
                <NavLink class="nav-link" href="" Match="NavLinkMatch.All">
                    <span class="oi oi-home" aria-hidden="true"></span> Home
                </NavLink>
            </AuthorizeView>
        </li>
        <li class="nav-item px-3">
            <AuthorizeView>
                <NavLink class="nav-link" href="Account" Match="NavLinkMatch.All">
                    <span class="oi oi-file" aria-hidden="true"></span> Account
                </NavLink>
            </AuthorizeView>
        </li>

        @if (GroupList != null)
        {
            foreach (var group in GroupList)
            {
                <li class="nav-item px-3">
                    <AuthorizeView>
                        <NavLink class="nav-link" href="@("GroupPage/" + group.id)" Match="NavLinkMatch.All">
                            <span class="oi oi-people" aria-hidden="true"></span> @("Group " + group.name)
                        </NavLink>
                    </AuthorizeView>
                </li>
            }
        }
    </ul>
</div>

@code {
    public IList<Group> GroupList { get; set; }
    private User _cachedUser;


    private bool _collapseNavMenu = true;

    private string NavMenuCssClass => _collapseNavMenu ? "collapse" : null;

    private void ToggleNavMenu()
    {
        _collapseNavMenu = !_collapseNavMenu;
    }

    protected override async Task OnInitializedAsync()
    {
        base.OnInitialized();
        _refreshServiceNavMem.RefreshRequested += RefreshState;
        _cachedUser = ((CustomAuthenticationStateProvider) AuthenticationStateProvider).cachedUser;
        GroupList = await _groupService.GetGroupList(_cachedUser.id);
    }
    
    public async void RefreshState()
    {
        GroupList = await _groupService.GetGroupList(_cachedUser.id);
        StateHasChanged();
    }

}