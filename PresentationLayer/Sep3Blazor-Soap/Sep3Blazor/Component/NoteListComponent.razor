@using Sep3Blazor.Model
@using System.Globalization
@using Sep3Blazor.Authentication
@using Sep3Blazor.Data.NoteData
@using Sep3Blazor.Data.Notifications
@using Sep3Blazor.Data.Notifications.NotificationModel
@inject INoteService _noteService
@inject AuthenticationStateProvider _authenticationStateProvider
@inject NotificationManager _notificationManager

<div class="container-fluid">
  <button type="button" class="btn btn-primary btn-sm" data-bs-toggle="modal" data-bs-target="#exampleAddModal"><i class="oi oi-plus"></i> New note</button>
  <div class="modal fade" id="exampleAddModal" tabindex="-1" aria-labelledby="exampleAddModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered">
      <div class="modal-content" style="background-color:white">
        <div class="modal-header">
          <h5 class="modal-title" id="exampleAddModalLabel">Add Node in Group @GroupId</h5>
          <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Cancel"></button>
        </div>
        <div class="modal-body">
          <EditForm Model="@_template" OnValidSubmit="@SubmitAddNote">
            <DataAnnotationsValidator />
            <ValidationSummary />
            <p>
              <label class="d-flex flex-row">
                <text class="col-2"> Week:</text>
                <InputNumber class="col-2" @bind-Value="_template.week" />
              </label>
            </p>
            <p>
              <label class="d-flex flex-row">
                <text class="col-2"> Year:</text>
                <InputNumber class="col-2" @bind-Value="_template.year" />
              </label>
            </p>
            <p>
              <label class="d-flex flex-row">
                <text class="col-2"> Name:</text>
                <InputText class="col-6" @bind-Value="_template.name"/>
              </label>
            </p>
            <p>
              <label class="d-flex flex-row">
               <text class="col-2">  Status:</text>
                <InputSelect class="col-2" @bind-Value="_template.status">
                  <option value="Not started">Not started</option>
                  <option value="Started">Started</option>
                  <option value="Finished">Finished</option>
                </InputSelect>
              </label>
            </p>
            <p>
              <label class="d-flex flex-row">
               <text class="col-2 textCenterer">  Text:</text>
                <InputTextArea class="col-6" @bind-Value="_template.text" />
              </label>
            </p>
            <button type="submit" class="btn btn-primary" data-bs-dismiss="modal">Save changes</button>
            <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
          </EditForm>
        </div>
      </div>
    </div>
  </div>
  <div class="row">
    <div class="col-1">
      <button type="button" class="btn btn-secondary" style="height: 480px; width: 36px;" @onclick="PreviousPage">&lt;</button>
    </div>
    <div class="col-10">
      <div class="row justify-content-between">
        @for (int i = -1; i < 2; i++)
        {
          <div class="col-sm-4">
            <div class="p-3 mb-2 bg-secondary text-white">
              @switch (i)
              {
                case -1:
                  var subtractedTime = _time.Subtract(TimeSpan.FromDays(7));
                  <p>Week @(GetIsoWeekOfYear(subtractedTime)) / Year @(GetIsoYear(subtractedTime)) </p>
                  break;
                case 0:
                  <p>Week @(GetIsoWeekOfYear(_time)) / Year @(GetIsoYear(_time))</p>
                  break;
                case 1:
                  var addedTime = _time.Add(TimeSpan.FromDays(7));
                  <p>Week @(GetIsoWeekOfYear(addedTime)) / Year @(GetIsoYear(addedTime)) </p>
                  break;
              }
            </div>
            <table class="table table-sm table-hover table-wrapper-scroll-y my-custom-scrollbar">
              @if (NoteList == null)
              {
                <p>
                  <em>Loading...</em>
                </p>
              }
              else
              {
                @foreach (Note note in NoteList)
                {
                  @switch (i)
                  {
                    case -1:
                      var subtractedTime = _time.Subtract(TimeSpan.FromDays(7));
                      if (note.year == GetIsoYear(subtractedTime) && note.week == GetIsoWeekOfYear(subtractedTime))
                      {
                        <NoteComponent OnClick="ClickHandler" Note="note"></NoteComponent>
                        <br>
                      }
                      break;
                    case 0:
                      if (note.year == GetIsoYear(_time) && note.week == GetIsoWeekOfYear(_time)){
                        <NoteComponent OnClick="ClickHandler" Note="note"></NoteComponent>
                        <br>
                      }
                      break;
                    case 1:
                      var addedTime = _time.Add(TimeSpan.FromDays(7));
                      if (note.year == GetIsoYear(addedTime) && note.week == GetIsoWeekOfYear(addedTime)){
                        <NoteComponent OnClick="ClickHandler" Note="note"></NoteComponent>
                        <br>
                      }
                      break;
                  }
                }
              }
            </table>
          </div>
        }
      </div>
    </div>
    <div class="col-1">
      <button type="button" class="btn btn-primary" style="height: 480px; width: 36px;" @onclick="NextPage">&gt;</button>
    </div>
  </div>
</div>

@code{

  [Parameter]
  public int GroupId { get; set; }

  [CascadingParameter]
  protected Task<AuthenticationState> AuthStat { get; set; }

  private IList<Note> NoteList { get; set; }
  private DateTime _time = DateTime.Today;

  private Note _template = new Note(0, 0, 0, 0, 0, "", "", "");

  private User _loggedInUser;

  // Method to run, when user enters this page.
  protected override async Task OnInitializedAsync()
  {
  // Get the selected group's notes
    NoteList = await _noteService.GetNoteList(GroupId.ToString());

  // Set the LoggedInUser equal to the User the custom Authentication service gets.
    _loggedInUser = ((CustomAuthenticationStateProvider) _authenticationStateProvider).cachedUser;
    
  // Instantiate Template note for the EditForm component.
    _template = new Note(0, _loggedInUser.id, GroupId, GetIsoWeekOfYear(_time), GetIsoYear(_time), "", "Not started", "");
  }
  
  protected override async void OnParametersSet()
  {
    NoteList = await _noteService.GetNoteList(GroupId.ToString());
    StateHasChanged();
  }

  // Show the notes further ahead in time and prevent going past week 52.
  private void NextPage()
  {
    var dateTime = _time.Add(TimeSpan.FromDays(7*3));
    _time = dateTime;

  /*
    switch (_currentWeek)
    {
      case 50:
        _currentWeek++;
        break;
      case 49:
        _currentWeek += 2;
        break;
      case <= 48:
        _currentWeek += 3;
        break;
    }*/
  }

  // Show the notes further behind in time and prevent going before week 1.
  private void PreviousPage()
  {
    var dateTime = _time.Subtract(TimeSpan.FromDays(7*3));
    _time = dateTime;
    /*switch (_currentWeek)
    {
      case 3:
        _currentWeek--;
        break;
      case 4:
        _currentWeek -= 2;
        break;
      case >= 5:
        _currentWeek -= 3;
        break;
    }*/
  }
  
  // Using Calender Library method to get the week of today´.
  private static int GetIsoWeekOfYear(DateTime time)
  {
    DayOfWeek day = CultureInfo.InvariantCulture.Calendar.GetDayOfWeek(time);
    if (day is >= DayOfWeek.Monday and <= DayOfWeek.Wednesday)
    {
      time = time.AddDays(3);
    }
    return CultureInfo.InvariantCulture.Calendar.GetWeekOfYear(time, CalendarWeekRule.FirstFourDayWeek, DayOfWeek.Monday);
  }

  private static int GetIsoYear(DateTime time)
  {
    return CultureInfo.InvariantCulture.Calendar.GetYear(time);
  }

  async Task ClickHandler()
  {
    NoteList = await _noteService.GetNoteList(GroupId.ToString());
  }
  
  private async Task SubmitAddNote()
  {
    Notification notification = await _noteService.AddNote(new Note(0, _template.userId, GroupId, _template.week, _template.year, _template.name, _template.status, _template.text));
    NoteList = await _noteService.GetNoteList(GroupId.ToString());
    _template = new Note(0, _loggedInUser.id, GroupId, GetIsoWeekOfYear(_time),GetIsoYear(_time), "", "Not started", "");
    _notificationManager.Show(notification);
  }
}