@using Sep3Blazor.Data.UserData
@using Sep3Blazor.Model
@using Sep3Blazor.Data.InvitationData
@using Sep3Blazor.Authentication
@using Sep3Blazor.Data.Notifications
@using Sep3Blazor.Data.Notifications.NotificationModel

@inject IUserService _userService
@inject IInvitationService _invitationService
@inject AuthenticationStateProvider _authenticationStateProvider
@inject NotificationManager _notificationManager


<h3>Invite to group</h3>
<div class="container-fluid">
    <br>
    <div class="col-10 ">
        @if (!Temp)
        {
            <div class="form-group">
                <div class="input-group">
                    <label>Search for a new member </label>
                </div>
                <input type="text" placeholder="Type the username " @bind-value="Username">
            </div>
            <div class="form-group">
                <button class="btn btn-primary btn-block" @onclick="Search">Search</button>
            </div>
            <br>
            <br>
        }
        else
        {
            <div class="form-group">
                <div class="input-group">
                    <label>Search for a new member </label>
                </div>
                <input type="text" placeholder="Type the username " @bind-value="Username">
            </div>
            <div class="form-group">
                <button class="btn btn-primary btn-block" @onclick="Search">Search</button>
            </div>
            <br>
            <br>
            <div class="col-sm-6" style="display:inline">

                <ul class="list-group">
                    @foreach (var user in TempUsers)
                    {
                        <div class="table">

                            <tbody>
                            <tr>
                                <td class="list-group-item">
                                    <a>Name</a>: <b>@user.firstName @user.lastName</b>
                                    <br/> <a>Username</a>: <b>@user.username</b>
                                    <a class="btn btn-primary" @onclick="@(() => InviteUser(user))" style="display:@Temp">Invite</a>
                                </td>
                            </tr>
                            </tbody>
                        </div>


                        <br>
                    }
                </ul>
            </div>
        }
    </div >
</div >

@code
{
    // Parameter to specify which group the invitee will be invited to.
    [Parameter]
    public int GroupId { get; set; }
    
    [Parameter]
    public string GroupName { get; set; }

    // Object for <EditForm> to use as a username when inviting.
    public string Username = "";

    // ???
    public bool Temp = false;

    // Lists of users used when searching.
    public List<User> Users;
    public List<User> TempUsers;

    // User object reserved for the user which opens the component.
    private User _cachedUser;

    // Method that is first to run when component is initialized.
    protected override async Task OnInitializedAsync()
    {
        _cachedUser = ((CustomAuthenticationStateProvider) _authenticationStateProvider).CachedUser;
    }

    // Method to search for users.
    private async Task Search()
    {
        if (!Username.Equals(""))
        {
            Users = await _userService.GetUserList(Username);
            TempUsers = new List<User>();
            foreach (var user in Users)
            {
                if (!user.username.Equals(_cachedUser.username))
                {
                    TempUsers.Add(user);
                }
            }
            if (TempUsers != null)
            {
                Temp = true;
            }
        }
        else
        {
            Temp = false;
        }
    }

    // Method to invite a user to group the component is opened in.
    private async Task InviteUser(User user)
    {
        Invitation invitation = new Invitation(0, GroupId, null, user.id, null, _cachedUser.id, null);
        Notification notification = await _invitationService.AddInvitation(invitation);
        await _notificationManager.Show(notification);
    }
}