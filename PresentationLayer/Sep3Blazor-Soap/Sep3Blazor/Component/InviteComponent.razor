@using Sep3Blazor.Data.UserData
@using Sep3Blazor.Model
@using Sep3Blazor.Data.InvitationData
@using Sep3Blazor.Authentication
@using Sep3Blazor.Data.Notifications
@using Sep3Blazor.Data.Notifications.NotificationModel
@inject IUserService UserService
@inject IInvitationService invitationService
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject NotificationManager NotificationManager
<h3>Invite to group</h3>


<div class="container-fluid">
    <br>
    <div class="col-10 ">
        @if (!temp)
        {
            <div class="form-group">
                <div class="input-group">
                    <label>Search for a new member </label>
                </div>
                <input type="text" placeholder="Type the username " @bind-value="username">
            </div>
            <div class="form-group">
                <button class="btn btn-primary btn-block" @onclick="Search">Search</button>
            </div>
            <br>
            <br>
        }
        else
        {
            <div class="form-group">
                <div class="input-group">
                    <label>Search for a new member </label>
                </div>
                <input type="text" placeholder="Type the username " @bind-value="username">
            </div>
            <div class="form-group">
                <button class="btn btn-primary btn-block" @onclick="Search">Search</button>
            </div>
            <br>
            <br>
            <div class="col-sm-6" style="display:inline">
                <ul class="list-group">
                    @foreach (var user in tempUsers)
                    {
                        <div class="table">

                            <tbody>
                            <tr>
                                <td class="list-group-item">
                                    <a>Name</a>: <b>@user.firstName @user.lastName</b>
                                    <br/> <a>Username</a>: <b>@user.username</b>
                                    <a class="btn btn-primary"@onclick="@(() => InviteUser(user))" style="display:@temp">Invite</a>
                                </td>
                            </tr>
                            </tbody>
                        </div>
                        <br>
                    }
                </ul>
            </div>
        }
    </div>
</div>

@code {

    // Parameter to specify which group the invitee will be invited to.
    [Parameter]
    public int GroupId { get; set; }

    // Object for <EditForm> to use as a username when inviting.
    public string username ="";
    
    // ???
    public bool temp = false;
    
    // Lists of users used when searching.
    public List<User> users;
    public List<User> tempUsers;
    
    // User object reserved for the user which opens the component.
    private User cachedUser;

    // Method that is first to run when component is initialized.
    protected override async Task OnInitializedAsync()
    {
        cachedUser = ((CustomAuthenticationStateProvider) AuthenticationStateProvider).cachedUser;
    }

    // Method to search for users.
    private async Task Search()
    {
        if (!username.Equals(""))
        {
            users = await UserService.GetUserList(username);
            tempUsers = new List<User>();
            foreach (var user in users)
            {
                if (!user.username.Equals(cachedUser.username))
                {
                    tempUsers.Add(user);
                }
            }
            if (tempUsers != null)
            {
                temp = true;
            }
        }
        else
        {
            temp = false;
        }
    }

    // Method to invite a user to group the component is opened in.
    private async Task InviteUser(User user)
    {
        Invitation invitation = new Invitation(0, GroupId, null, user.id, null, cachedUser.id, null);
        Notification notification = await invitationService.AddInvitation(invitation);
        await NotificationManager.Show(notification);
    }
}