@using Sep3Blazor.Data.UserData
@using Sep3Blazor.Model
@using Sep3Blazor.Data.InvitationData
@using Sep3Blazor.Authentication
@inject IUserService UserService
@inject IInvitationService invitationService
@inject AuthenticationStateProvider AuthenticationStateProvider
<h3>Invite</h3>

@if (!temp)
{
    <div class="form-group">
        <div class="input-group">
            <label>Search for a new member </label>
        </div>
        <input type="text" placeholder="Type the username " @bind-value="username">
    </div>
    <div class="form-group">
        <button class="btn btn-primary btn-block" @onclick="Search">Search</button>
    </div>
    <br>
    <br>
}
else
{
    <div class="form-group">
        <div class="input-group">
            <label>Search for a new member </label>
        </div>
        <input type="text" placeholder="Type the username " @bind-value="username">
    </div>
    <div class="form-group">
        <button class="btn btn-primary btn-block" @onclick="Search">Search</button>
    </div>
    <br>
    <br>
    <div class="col-sm-6" style="display:inline">
        <ul class="list-group">
            @foreach (var user in tempUsers)
            {
                <div class="form-group">
                    <div class="input-group">
                        <li class="list-group-item onHoverChange"><u>Name</u>: <b>@user.firstName @user.lastName</b> <br/> <u>Username</u>: <b>@user.username</b></li>
                        <button class="btn btn-primary btn-block" @onclick="@(() => InviteUser(user))" style="display:@temp ">Invite </button>
                    </div>
                </div>
                <br>
            }
        </ul>
    </div>
}

@code {
    public string username;
    public bool temp = false;
    public List<User> users;
    public List<User> tempUsers;
    [Parameter]
    public int Value { get; set; }

    private User cachedUser;


    protected override async Task OnInitializedAsync()
    {
        cachedUser = ((CustomAuthenticationStateProvider) AuthenticationStateProvider).cachedUser;
    }

    private async Task Search()
    {
        if (!username.Equals(""))
        {
            users = await UserService.GetUser(username);
            tempUsers = new List<User>();
            foreach (var user in users)
            {
                
                if (!user.username.Equals(cachedUser.username))
                {
                  tempUsers.Add(user);
                }
            }
            if (tempUsers != null)
            {
                temp = true;
            }
        }
        else
        {
            temp = false;
        }
    }

    private async Task InviteUser(User user)
    {
        Invitation invitation = new Invitation(0, Value, null, user.id, null, cachedUser.id, null);
        await invitationService.AddInvitations(invitation);
    }



}

