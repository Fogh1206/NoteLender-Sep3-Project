@page "/Invitations"
@using System.Drawing
@using Sep3Blazor.Data
@using Sep3Blazor.Data.GroupMembersData
@using Sep3Blazor.Data.InvitationData
@using Sep3Blazor.Data.Refresh
@using Sep3Blazor.Model
@inject IInvitationService _invitationService
@inject IRefreshService _refreshService
@inject IGroupMembersService _groupMembersService

<h3>Pending invitations</h3>

@if (InvitationList == null)
{
    <progress></progress>
}
else if (InvitationList.Count == 0)
{
    <p>
        You don't have any invitations yet.
        <br>
        You can wait for other users to invite you or you can create group on the letf
    </p>
}
else
{
    foreach (Invitation invitation in InvitationList)
    {
        <div class="card mb-2">
            <div class="card-header">
                @invitation.id
            </div>
            <div class="card-body">
                <p>User @invitation.invitorName Wants you to pe apart of group @invitation.groupName </p>

                <button type="button" style="background-color: darkgreen "
                        @onclick="@(() => AcceptInvitation(invitation.inviteeId, invitation.groupId, invitation.id))">
                    Accept
                </button>
                <button type="button" style="background-color: red" @onclick="@(() => RemoveInvitation(invitation.id))">Decline</button>

            </div>
        </div>
    }
}



@code {

    [Parameter]
    public String Value { get; set; }

    public IList<Invitation> InvitationList { get; set; }
    public IList<GroupMembers> GroupMembersList { get; set; }
    public IList<Group> GroupList { get; set; }
    public string SearchPhrase;
    private Invitation _invitation;

    protected override async Task OnInitializedAsync()
    {
        Console.WriteLine("Invitation");
        await SubmitGetInvitation();
    }

    private async Task RemoveInvitation(int id)
    {
        await _invitationService.DeleteInvitation(id.ToString());
    }

    /*
    private async void HandleValidSubmit()
    {
        Invitation invitationToAdd = new Invitation(Invitation.id, Invitation.groupId, Invitation.inviteeId, Invitation.invitorId);
        Invitation temp = await _invitationService.AddInvitations(invitationToAdd);
    }
    */

    private async Task SubmitGetInvitation()
    {
        try
        {
            InvitationList = await _invitationService.GetInvitations(Value.ToString());
            foreach (var invitation in InvitationList)
            {
                Console.WriteLine(invitation.id);
            }
            SearchPhrase = InvitationList[0].id.ToString();
        }
        catch (ArgumentOutOfRangeException indexOutOfRangeException)
        {
            SearchPhrase = "Out of range";
        }
    }


    private async Task AcceptInvitation(int groupId, int userId, int invitationId)
    {
        await _groupMembersService.AddGroupMember(groupId, userId);
        await _invitationService.DeleteInvitation(invitationId.ToString());
        _refreshService.CallRequestRefresh();
        await SubmitGetInvitation();
    //await _groupMembersService.GetGroupMembersList(id);
    }


}